{"ast":null,"code":"var _jsxFileName = \"/Users/nico/Code/dreister_api/frontend/components/Data.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useContext } from 'react';\nimport { ScrapeContext } from './scrapeContext';\nimport Table from './Table';\nimport Chart from './Chart';\n\nconst Data = () => {\n  const {\n    scrapes,\n    fetchScrapes,\n    remainingScrapes\n  } = useContext(ScrapeContext);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    type: \"button\",\n    onClick: fetchScrapes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, \"Refresh\"), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, \"Top 100 Profiles connected to Dreister (Followers + Following) sorted by number of Followers\"), __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, remainingScrapes, \" remaining to complete the DB - Our cron is working on it!\"), __jsx(Chart, {\n    scrapes: scrapes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }), __jsx(Table, {\n    scrapes: scrapes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default Data;","map":{"version":3,"sources":["/Users/nico/Code/dreister_api/frontend/components/Data.js"],"names":["useContext","ScrapeContext","Table","Chart","Data","scrapes","fetchScrapes","remainingScrapes"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA;AAAzB,MAA8CP,UAAU,CAACC,aAAD,CAA9D;AACA,SAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACN;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEK,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADM,EAEN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oGAFM,EAGN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKC,gBAAL,+DAHM,EAIN,MAAC,KAAD;AAAO,IAAA,OAAO,EAAEF,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJM,EAKN,MAAC,KAAD;AAAO,IAAA,OAAO,EAAEA,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALM,CAAR;AAOD,CATD;;AAWA,eAAeD,IAAf","sourcesContent":["import { useContext } from 'react';\nimport { ScrapeContext } from './scrapeContext';\nimport Table from './Table';\nimport Chart from './Chart';\n\nconst Data = () => {\n  const { scrapes, fetchScrapes, remainingScrapes } = useContext(ScrapeContext)\n  return (<div>\n    <button type='button' onClick={fetchScrapes}>Refresh</button>\n    <h2>Top 100 Profiles connected to Dreister (Followers + Following) sorted by number of Followers</h2>\n    <h4>{remainingScrapes} remaining to complete the DB - Our cron is working on it!</h4>\n    <Chart scrapes={scrapes}/>\n    <Table scrapes={scrapes}/>\n  </div>)\n}\n\nexport default Data;\n"]},"metadata":{},"sourceType":"module"}